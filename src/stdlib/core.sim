(declare stdlib-loaded? T)

(def id (x) x)
(def const (x) (lambda () x))

(def + (... rest) (foldl (lambda (a b) (add a b)) 0 rest))
(def * (... rest) (foldl (lambda (a b) (mul a b)) 1 rest))
(def - (first ... rest)
  (if (null? rest)
    (- 0 first)
    (foldl (lambda (a b) (sub a b)) first rest)
  ))
(def / (a b) (div a b))
(def % (a b) (mod a b))
(def square (z) (* z z))

; TODO: Allow n-args
(def = (a b) (eq? a b))
(def > (a b) (gt? a b))
(def >= (a b) (gte? a b))
(def < (a b) (lt? a b))
(def <= (a b) (lte? a b))

(def not (a) (if a F T))

(def and (a b) (if a b F))
(def or (a b) (if a T b))

(def bigger (a b) (if (> a b) a b))
(def smaller (a b) (if (< a b) a b))

(def max (first ... ls) (foldl bigger first ls))
(def min (first ... ls) (foldl smaller first ls))

