
(def null? (ls) (eq? Nil ls))

(def list (... ls) ls)

(def length (ls)
  (if (null? ls) 0 (+ 1 (length (cdr ls)))))

(def concat (x y)
  (if (null? x) y (cons (car x) (concat (cdr x) y))))

(def foldl (fn init ls)
  (if (null? ls)
    init
    (fn (foldl fn init (cdr ls)) (car ls))
  ))

(def sum (ls) (apply + ls))
(def product (ls) (apply + ls))

